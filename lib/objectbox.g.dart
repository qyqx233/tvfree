// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/model/device.dart';
import 'domain/model/kv.dart';
import 'domain/model/m3u8.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2812637239221943325),
      name: 'UpnpDevice',
      lastPropertyId: const obx_int.IdUid(11, 980501782828565530),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3251112881833158810),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2430370867434912350),
            name: 'usn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5646567649651741708),
            name: 'friendlyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2605326980742767027),
            name: 'descriptionURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 433185505835887032),
            name: 'controlURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4043295783031261220),
            name: 'manufacturer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2914247403658904462),
            name: 'serviceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1093140248705586544),
            name: 'eventSubURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6555993005186953686),
            name: 'scpdURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2400825184871174601),
            name: 'presentationURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 980501782828565530),
            name: 'isConnected',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3321990358964992251),
      name: 'M3u8Parser',
      lastPropertyId: const obx_int.IdUid(5, 4476374144954012848),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8154566716964820884),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2312747680048321225),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6869094087263575193),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9160759946006594359),
            name: 'sk',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4476374144954012848),
            name: 'isActive',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7392285376877314639),
      name: 'Kv',
      lastPropertyId: const obx_int.IdUid(3, 4080711973839798228),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1255047679048211316),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6276900041697795792),
            name: 'key',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 5213617542121809068)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4080711973839798228),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7392285376877314639),
      lastIndexId: const obx_int.IdUid(1, 5213617542121809068),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    UpnpDevice: obx_int.EntityDefinition<UpnpDevice>(
        model: _entities[0],
        toOneRelations: (UpnpDevice object) => [],
        toManyRelations: (UpnpDevice object) => {},
        getId: (UpnpDevice object) => object.id,
        setId: (UpnpDevice object, int id) {
          object.id = id;
        },
        objectToFB: (UpnpDevice object, fb.Builder fbb) {
          final usnOffset = fbb.writeString(object.usn);
          final friendlyNameOffset = fbb.writeString(object.friendlyName);
          final descriptionURLOffset = fbb.writeString(object.descriptionURL);
          final controlURLOffset = object.controlURL == null
              ? null
              : fbb.writeString(object.controlURL!);
          final manufacturerOffset = object.manufacturer == null
              ? null
              : fbb.writeString(object.manufacturer!);
          final serviceTypeOffset = object.serviceType == null
              ? null
              : fbb.writeString(object.serviceType!);
          final eventSubURLOffset = object.eventSubURL == null
              ? null
              : fbb.writeString(object.eventSubURL!);
          final scpdURLOffset =
              object.scpdURL == null ? null : fbb.writeString(object.scpdURL!);
          final presentationURLOffset = object.presentationURL == null
              ? null
              : fbb.writeString(object.presentationURL!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, usnOffset);
          fbb.addOffset(2, friendlyNameOffset);
          fbb.addOffset(3, descriptionURLOffset);
          fbb.addOffset(4, controlURLOffset);
          fbb.addOffset(5, manufacturerOffset);
          fbb.addOffset(6, serviceTypeOffset);
          fbb.addOffset(7, eventSubURLOffset);
          fbb.addOffset(8, scpdURLOffset);
          fbb.addOffset(9, presentationURLOffset);
          fbb.addBool(10, object.isConnected);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final friendlyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final descriptionURLParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final manufacturerParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final controlURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final serviceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final eventSubURLParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final scpdURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final presentationURLParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final isConnectedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = UpnpDevice(
              usn: usnParam,
              friendlyName: friendlyNameParam,
              descriptionURL: descriptionURLParam,
              id: idParam,
              manufacturer: manufacturerParam,
              controlURL: controlURLParam,
              serviceType: serviceTypeParam,
              eventSubURL: eventSubURLParam,
              scpdURL: scpdURLParam,
              presentationURL: presentationURLParam,
              isConnected: isConnectedParam);

          return object;
        }),
    M3u8Parser: obx_int.EntityDefinition<M3u8Parser>(
        model: _entities[1],
        toOneRelations: (M3u8Parser object) => [],
        toManyRelations: (M3u8Parser object) => {},
        getId: (M3u8Parser object) => object.id,
        setId: (M3u8Parser object, int id) {
          object.id = id;
        },
        objectToFB: (M3u8Parser object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final skOffset =
              object.sk == null ? null : fbb.writeString(object.sk!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, urlOffset);
          fbb.addOffset(3, skOffset);
          fbb.addBool(4, object.isActive);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final skParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = M3u8Parser(
              id: idParam,
              name: nameParam,
              url: urlParam,
              sk: skParam,
              isActive: isActiveParam);

          return object;
        }),
    Kv: obx_int.EntityDefinition<Kv>(
        model: _entities[2],
        toOneRelations: (Kv object) => [],
        toManyRelations: (Kv object) => {},
        getId: (Kv object) => object.id,
        setId: (Kv object, int id) {
          object.id = id;
        },
        objectToFB: (Kv object, fb.Builder fbb) {
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Kv(key: keyParam, value: valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [UpnpDevice] entity fields to define ObjectBox queries.
class UpnpDevice_ {
  /// See [UpnpDevice.id].
  static final id =
      obx.QueryIntegerProperty<UpnpDevice>(_entities[0].properties[0]);

  /// See [UpnpDevice.usn].
  static final usn =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[1]);

  /// See [UpnpDevice.friendlyName].
  static final friendlyName =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[2]);

  /// See [UpnpDevice.descriptionURL].
  static final descriptionURL =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[3]);

  /// See [UpnpDevice.controlURL].
  static final controlURL =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[4]);

  /// See [UpnpDevice.manufacturer].
  static final manufacturer =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[5]);

  /// See [UpnpDevice.serviceType].
  static final serviceType =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[6]);

  /// See [UpnpDevice.eventSubURL].
  static final eventSubURL =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[7]);

  /// See [UpnpDevice.scpdURL].
  static final scpdURL =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[8]);

  /// See [UpnpDevice.presentationURL].
  static final presentationURL =
      obx.QueryStringProperty<UpnpDevice>(_entities[0].properties[9]);

  /// See [UpnpDevice.isConnected].
  static final isConnected =
      obx.QueryBooleanProperty<UpnpDevice>(_entities[0].properties[10]);
}

/// [M3u8Parser] entity fields to define ObjectBox queries.
class M3u8Parser_ {
  /// See [M3u8Parser.id].
  static final id =
      obx.QueryIntegerProperty<M3u8Parser>(_entities[1].properties[0]);

  /// See [M3u8Parser.name].
  static final name =
      obx.QueryStringProperty<M3u8Parser>(_entities[1].properties[1]);

  /// See [M3u8Parser.url].
  static final url =
      obx.QueryStringProperty<M3u8Parser>(_entities[1].properties[2]);

  /// See [M3u8Parser.sk].
  static final sk =
      obx.QueryStringProperty<M3u8Parser>(_entities[1].properties[3]);

  /// See [M3u8Parser.isActive].
  static final isActive =
      obx.QueryBooleanProperty<M3u8Parser>(_entities[1].properties[4]);
}

/// [Kv] entity fields to define ObjectBox queries.
class Kv_ {
  /// See [Kv.id].
  static final id = obx.QueryIntegerProperty<Kv>(_entities[2].properties[0]);

  /// See [Kv.key].
  static final key = obx.QueryStringProperty<Kv>(_entities[2].properties[1]);

  /// See [Kv.value].
  static final value = obx.QueryStringProperty<Kv>(_entities[2].properties[2]);
}
